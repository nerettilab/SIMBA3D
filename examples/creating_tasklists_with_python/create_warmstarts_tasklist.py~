# -*- coding: utf-8 -*-
"""
An example of creating tasklists
Created on Thu Sep 07 05:53:57 2017

@author: Michael Rosenthal
"""
import os
import numpy as np
import uuid
# import simplejson or json
#
# This is useful because the syntax is pythonic, it's human readable, and it
# can be read by other programs in other languages.
#
# json is potentially and older version of simplejson which is updated more 
# frequently than Python
#
# A good practice is to use one or the other as a fallback.
try: import simplejson as json # try to import simplejson
except ImportError: import json #otherwise import json

from pleases.mp_manager import significant_figures

taskfilepath='warmstart_tasklist.txt'
taskss=[]
lambda_2=0.5;
lambda_3=0.5;
LAMBDA_3=np.linspace(0,1,11);
itr=0;
for independent_tasks in [0]:   
    tasks=[]
    UUID=uuid.uuid4()
    for lambda_1 in LAMBDA_3:
        itr+=1;
        tasks.append(
            {
                # task parameters        
                'usewarmstarts':True,
                'taskname'  : str(UUID)+str(itr),
                'uuid'  : str(UUID)+str(itr),#  assign a unique identifier to resume tasklists
                # initialization settings        
                'randomize_initialization'  : False, # Randomize the initialized curve
                #'seed'                      : int(np.random.rand()*4294967295),   # fixed seed for randomizing inititialization
                
                # debug options
                'check_jacobian'    : False, # check analytical gradient with numerical gradient 9
                
                 # data file names to load
                'file_names'  :
                    {
                        'inputdir'  : 'data/', # location of data input files
                        'outputdir' : 'results/', # directory where to output results
                        # the following are relative to the inputdir directory
                        "initialized_curve"         : 'initialized_curve.npy',
                        "pairwise_contact_matrix"   : 'simulated_contact_matrix.npy',
                        #"population_contact_matrix" : 'population_mESC_M19_a.npy',   
                        #"prior_shape_model"         : 'prior_shape_model.npy',      
                        "output_filename"           :  str(UUID)+str(itr)+'.npy',
                    },
                
                # data                
                'data'  :
                    {
                    #'initialized_curve'         : initialized_curve,
                    #'t'                         : t,   # optional
                    #'pairwise_contact_matrix'   : [],
                    #'index'                     : index,
                    #'population_contact_matrix' : pairwise_contact_pop,
                    #'prior_shape_model'         : prior_shape_model,
                    },
              
            
                # parameter settings
                'parameters'    :
                    {
                    'a'              : -3.0,
                    'b'              : 1.0, # not identifiable with unconstrained scale
                    'term_weights'   :  
                        {                              
                        'data'             : 1.0,      # weight for the data term
                        'uniform spacing'  : lambda_1, # scaled first order penalty
                        'smoothing'        : lambda_2, # scaled second order penalty
                        'population prior' : lambda_3,    # weight for the population matrix prior
                        'shape prior'      : 0.0,    # weight for the shape prior
                        
                        # below are unsupported penalties
                        #'firstroughness'   :0.0e3,   # weight for the fist order roughness
                        #'secondroughness'  :0.0e-16,   # weight for the second order roughness
                        #'scaledfirstroughness'  :0.0,   # weight for the scaled second order roughness
                        #'scaledsecondroughness' :0.0,   # weight for the scaled second order roughness
                        #'parameterization' :0, # not implemented
                        },
                    },
                # options
                'options'   :   
                    {   
                    'maxitr'    : 100000, # set maximum number of iterations
                    'display'   : True, # display function values at each iteration
                    'store'     : False, # store iterative curves
                    'method'    : 'BFGS',# Broyden, Fletcher, Goldfarb, and Shanno (quasi-Newton, only first derivatives are used)
                    #'method'    :'Nelder-Mead',# robust but slow numerical approach
                    #'method'    :'CG',# nonlinear conjugate gradient algorithm by Polak and Ribiere (only first derivatives are used)
                    #'method'    :'Newton-CG',# (truncated Newton method)
                    'gradient tolerance'    : 1e-5,
                    },
            }    
        )               
    taskss.append(tasks)  
#Use JSON to write the tasklist to file
with open(taskfilepath, 'w') as tasklist:
    json.dump(tasks, tasklist,indent=4,sort_keys=True) # pretty print the JSON to make it human readable
    #json.dump(tasks, tasklist) # if you don't care about pretty printing the JSON just dump it this way
#%%
