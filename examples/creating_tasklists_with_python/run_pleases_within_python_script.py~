# -*- coding: utf-8 -*-
"""
An example of creating tasklists
Created on Thu Sep 07 05:53:57 2017

@author: Michael Rosenthal
"""
import os
import numpy as np
import uuid
# import simplejson or json
#
# This is useful because the syntax is pythonic, it's human readable, and it
# can be read by other programs in other languages.
#
# json is potentially and older version of simplejson which is updated more
# frequently than Python
#
# A good practice is to use one or the other as a fallback.
try: import simplejson as json # try to import simplejson
except ImportError: import json #otherwise import json

import pleases.mp_manager as mp
import time

taskfilepath='tasklist.json'
cores=1; # the number of parallel process to run simultateously

tasks=[]

lambda_2=0.5;
lambda_3=0.5;
for lambda_1 in np.linspace(0,1,11):
            UUID=uuid.uuid4()
            tasks.append(
                {
                    # task parameters
                    'usewarmstarts':True,
                    'taskname'  : str(UUID),
                    'uuid'  : str(UUID),#  assign a unique identifier to resume tasklists
                    # initialization settings
                    'randomize_initialization'  : False, # Randomize the initialized curve
                    #'seed'                      : int(np.random.rand()*4294967295),   # fixed seed for randomizing inititialization

                    # debug options
                    'check_jacobian'    : False, # check analytical gradient with numerical gradient 9

                     # data file names to load
                    'file_names'  :
                        {
                        'inputdir'  : 'data/', # location of data input files
                        'outputdir' : 'results/', # directory where to output results
                        # the following are relative to the inputdir directory
                        "initialized_curve"         : 'initialized_curve.npy',
                        "pairwise_contact_matrix"   : 'simulated_contact_matrix.npy',
                        #"population_contact_matrix" : 'population_mESC_M19_a.npy',
                        #"prior_shape_model"         : 'prior_shape_model.npy',
                        "output_filename"           :  str(UUID)+'.npy',
                        },

                    # data
                    'data'  :
                        {
                        #'initialized_curve'         : initialized_curve,
                        #'t'                         : t,   # optional
                        #'pairwise_contact_matrix'   : [],
                        #'index'                     : index,
                        #'population_contact_matrix' : pairwise_contact_pop,
                        #'prior_shape_model'         : prior_shape_model,
                        },


                    # parameter settings
                    'parameters'    :
                        {
                        'a'              : -3.0,
                        'b'              : 1.0, # not identifiable with unconstrained scale
                        'term_weights'   :
                            {
                            'data'             : 1.0,      # weight for the data term
                            'uniform_spacing'  : lambda_1, # scaled first order penalty
                            'smoothing'        : lambda_2, # scaled second order penalty
                            'population_prior' : lambda_3,    # weight for the population matrix prior
                            'shape_prior'      : 0.0,    # weight for the shape_prior

                            # below are unsupported penalties
                            #'firstroughness'   :0.0e3,   # weight for the fist order roughness
                            #'secondroughness'  :0.0e-16,   # weight for the second order roughness
                            #'scaledfirstroughness'  :0.0,   # weight for the scaled second order roughness
                            #'scaledsecondroughness' :0.0,   # weight for the scaled second order roughness
                            #'parameterization' :0, # not implemented
                            },
                        },
                    # options
                    'options'   :
                        {
                        'maxitr'    : 100000, # set maximum number of iterations
                        'display'   : True, # display function values at each iteration
                        'store'     : False, # store iterative curves
                        'method'    : 'BFGS',# Broyden, Fletcher, Goldfarb, and Shanno (quasi-Newton, only first derivatives are used)
                        #'method'    :'Nelder-Mead',# robust but slow numerical approach
                        #'method'    :'CG',# nonlinear conjugate gradient algorithm by Polak and Ribiere (only first derivatives are used)
                        #'method'    :'Newton-CG',# (truncated Newton method)
                        'gradient tolerance'    : 1e-5,
                        },
                    }
            )
#Use JSON to write the tasklist to file
# if you want to save the task for posterity
with open(taskfilepath, 'w') as tasklist:
    json.dump(tasks, tasklist,indent=4,sort_keys=True) # pretty print the JSON to make it human readible
    #json.dump(tasks, tasklist) # if you don't care about pretty printing the JSON just dump it this way

#run pleases
# tasks=json.load(tasklist) # if you want to load the tasklist from file
t= time.time()
mp.mp_handler(tasks,cores)
elapsed=time.time()-t
print('Total %s seconds elapsed' % (elapsed))

#%%
